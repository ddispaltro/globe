//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.FlapEnum = {
'UNKNOWN' : 0,
'FLAPPING' : 1,
'NOFLAP' : 2
};
ttypes.AlarmState = {
'UNKNOWN' : -1,
'OK' : 1,
'WARNING' : 2,
'CRITICAL' : 6
};
ttypes.Result = {
'FAILED' : 0,
'OK' : 1
};
ttypes.CollectorState = {
'UP' : 0,
'DOWN' : 1
};
ttypes.VerificationModel = {
'ONE' : 0,
'QUORUM' : 1,
'ALL' : 2
};
var InvalidQueryException = module.exports.InvalidQueryException = function(args) {
  Thrift.TException.call(this, "InvalidQueryException")
  this.name = "InvalidQueryException"
  this.why = null;
  if (args) {
    if (args.why !== undefined) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(InvalidQueryException, Thrift.TException);
InvalidQueryException.prototype.name = 'InvalidQueryException';
InvalidQueryException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidQueryException.prototype.write = function(output) {
  output.writeStructBegin('InvalidQueryException');
  if (this.why != null) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 1);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AlarmNotFoundException = module.exports.AlarmNotFoundException = function(args) {
  Thrift.TException.call(this, "AlarmNotFoundException")
  this.name = "AlarmNotFoundException"
  this.why = null;
  if (args) {
    if (args.why !== undefined) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(AlarmNotFoundException, Thrift.TException);
AlarmNotFoundException.prototype.name = 'AlarmNotFoundException';
AlarmNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlarmNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('AlarmNotFoundException');
  if (this.why != null) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 1);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Metric = module.exports.Metric = function(args) {
  this.metricType = null;
  this.valueDbl = null;
  this.valueI64 = null;
  this.valueI32 = null;
  this.valueStr = null;
  if (args) {
    if (args.metricType !== undefined) {
      this.metricType = args.metricType;
    }
    if (args.valueDbl !== undefined) {
      this.valueDbl = args.valueDbl;
    }
    if (args.valueI64 !== undefined) {
      this.valueI64 = args.valueI64;
    }
    if (args.valueI32 !== undefined) {
      this.valueI32 = args.valueI32;
    }
    if (args.valueStr !== undefined) {
      this.valueStr = args.valueStr;
    }
  }
};
Metric.prototype = {};
Metric.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.metricType = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.valueDbl = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.valueI64 = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.valueI32 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.valueStr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Metric.prototype.write = function(output) {
  output.writeStructBegin('Metric');
  if (this.metricType != null) {
    output.writeFieldBegin('metricType', Thrift.Type.BYTE, 1);
    output.writeByte(this.metricType);
    output.writeFieldEnd();
  }
  if (this.valueDbl != null) {
    output.writeFieldBegin('valueDbl', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.valueDbl);
    output.writeFieldEnd();
  }
  if (this.valueI64 != null) {
    output.writeFieldBegin('valueI64', Thrift.Type.I64, 3);
    output.writeI64(this.valueI64);
    output.writeFieldEnd();
  }
  if (this.valueI32 != null) {
    output.writeFieldBegin('valueI32', Thrift.Type.I32, 4);
    output.writeI32(this.valueI32);
    output.writeFieldEnd();
  }
  if (this.valueStr != null) {
    output.writeFieldBegin('valueStr', Thrift.Type.STRING, 5);
    output.writeString(this.valueStr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CorrelatedStatus = module.exports.CorrelatedStatus = function(args) {
  this.id = null;
  this.collector = null;
  this.criteriaState = null;
  this.status = null;
  this.state = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.collector !== undefined) {
      this.collector = args.collector;
    }
    if (args.criteriaState !== undefined) {
      this.criteriaState = args.criteriaState;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
  }
};
CorrelatedStatus.prototype = {};
CorrelatedStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.collector = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.criteriaState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CorrelatedStatus.prototype.write = function(output) {
  output.writeStructBegin('CorrelatedStatus');
  if (this.id != null) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.collector != null) {
    output.writeFieldBegin('collector', Thrift.Type.STRING, 2);
    output.writeString(this.collector);
    output.writeFieldEnd();
  }
  if (this.criteriaState != null) {
    output.writeFieldBegin('criteriaState', Thrift.Type.I32, 3);
    output.writeI32(this.criteriaState);
    output.writeFieldEnd();
  }
  if (this.status != null) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 4);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.state != null) {
    output.writeFieldBegin('state', Thrift.Type.I32, 5);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Telescope = module.exports.Telescope = function(args) {
  this.id = null;
  this.checkId = null;
  this.acctId = null;
  this.checkModule = null;
  this.entityId = null;
  this.target = null;
  this.timestamp = null;
  this.consecutiveTrigger = 1;
  this.verifyModel = null;
  this.analyzedByMonitoringZoneId = null;
  this.dimensions = null;
  this.metrics = null;
  this.dimensionKey = null;
  this.collector = null;
  this.flapEnum = 0;
  this.criteriaState = null;
  this.computedState = null;
  this.alarmId = null;
  this.availability = null;
  this.state = null;
  this.status = null;
  this.correlatedStatuses = null;
  this.monitoringZoneId = null;
  this.txnId = null;
  this.checkType = null;
  this.previousKnownState = null;
  this.collectorKeys = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.checkId !== undefined) {
      this.checkId = args.checkId;
    }
    if (args.acctId !== undefined) {
      this.acctId = args.acctId;
    }
    if (args.checkModule !== undefined) {
      this.checkModule = args.checkModule;
    }
    if (args.entityId !== undefined) {
      this.entityId = args.entityId;
    }
    if (args.target !== undefined) {
      this.target = args.target;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.consecutiveTrigger !== undefined) {
      this.consecutiveTrigger = args.consecutiveTrigger;
    }
    if (args.verifyModel !== undefined) {
      this.verifyModel = args.verifyModel;
    }
    if (args.analyzedByMonitoringZoneId !== undefined) {
      this.analyzedByMonitoringZoneId = args.analyzedByMonitoringZoneId;
    }
    if (args.dimensions !== undefined) {
      this.dimensions = args.dimensions;
    }
    if (args.metrics !== undefined) {
      this.metrics = args.metrics;
    }
    if (args.dimensionKey !== undefined) {
      this.dimensionKey = args.dimensionKey;
    }
    if (args.collector !== undefined) {
      this.collector = args.collector;
    }
    if (args.flapEnum !== undefined) {
      this.flapEnum = args.flapEnum;
    }
    if (args.criteriaState !== undefined) {
      this.criteriaState = args.criteriaState;
    }
    if (args.computedState !== undefined) {
      this.computedState = args.computedState;
    }
    if (args.alarmId !== undefined) {
      this.alarmId = args.alarmId;
    }
    if (args.availability !== undefined) {
      this.availability = args.availability;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.correlatedStatuses !== undefined) {
      this.correlatedStatuses = args.correlatedStatuses;
    }
    if (args.monitoringZoneId !== undefined) {
      this.monitoringZoneId = args.monitoringZoneId;
    }
    if (args.txnId !== undefined) {
      this.txnId = args.txnId;
    }
    if (args.checkType !== undefined) {
      this.checkType = args.checkType;
    }
    if (args.previousKnownState !== undefined) {
      this.previousKnownState = args.previousKnownState;
    }
    if (args.collectorKeys !== undefined) {
      this.collectorKeys = args.collectorKeys;
    }
  }
};
Telescope.prototype = {};
Telescope.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.checkId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.acctId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.checkModule = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.entityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.target = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.consecutiveTrigger = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.verifyModel = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.analyzedByMonitoringZoneId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.dimensions = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.dimensions[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.metrics = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var key14 = null;
          var val15 = null;
          key14 = input.readString();
          val15 = new ttypes.Metric();
          val15.read(input);
          this.metrics[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.dimensionKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.collector = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.flapEnum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.criteriaState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.computedState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.alarmId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BYTE) {
        this.availability = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.BYTE) {
        this.state = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.correlatedStatuses = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.CorrelatedStatus();
          elem22.read(input);
          this.correlatedStatuses.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.monitoringZoneId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.txnId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.checkType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.I32) {
        this.previousKnownState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.collectorKeys = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = input.readString();
          this.collectorKeys.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Telescope.prototype.write = function(output) {
  output.writeStructBegin('Telescope');
  if (this.id != null) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.checkId != null) {
    output.writeFieldBegin('checkId', Thrift.Type.STRING, 2);
    output.writeString(this.checkId);
    output.writeFieldEnd();
  }
  if (this.acctId != null) {
    output.writeFieldBegin('acctId', Thrift.Type.STRING, 3);
    output.writeString(this.acctId);
    output.writeFieldEnd();
  }
  if (this.checkModule != null) {
    output.writeFieldBegin('checkModule', Thrift.Type.STRING, 4);
    output.writeString(this.checkModule);
    output.writeFieldEnd();
  }
  if (this.entityId != null) {
    output.writeFieldBegin('entityId', Thrift.Type.STRING, 5);
    output.writeString(this.entityId);
    output.writeFieldEnd();
  }
  if (this.target != null) {
    output.writeFieldBegin('target', Thrift.Type.STRING, 6);
    output.writeString(this.target);
    output.writeFieldEnd();
  }
  if (this.timestamp != null) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 7);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.consecutiveTrigger != null) {
    output.writeFieldBegin('consecutiveTrigger', Thrift.Type.I32, 8);
    output.writeI32(this.consecutiveTrigger);
    output.writeFieldEnd();
  }
  if (this.verifyModel != null) {
    output.writeFieldBegin('verifyModel', Thrift.Type.I32, 9);
    output.writeI32(this.verifyModel);
    output.writeFieldEnd();
  }
  if (this.analyzedByMonitoringZoneId != null) {
    output.writeFieldBegin('analyzedByMonitoringZoneId', Thrift.Type.STRING, 10);
    output.writeString(this.analyzedByMonitoringZoneId);
    output.writeFieldEnd();
  }
  if (this.dimensions != null) {
    output.writeFieldBegin('dimensions', Thrift.Type.MAP, 11);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.dimensions));
    for (var kiter30 in this.dimensions)
    {
      if (this.dimensions.hasOwnProperty(kiter30))
      {
        var viter31 = this.dimensions[kiter30];
        output.writeString(kiter30);
        output.writeString(viter31);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.metrics != null) {
    output.writeFieldBegin('metrics', Thrift.Type.MAP, 12);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.metrics));
    for (var kiter32 in this.metrics)
    {
      if (this.metrics.hasOwnProperty(kiter32))
      {
        var viter33 = this.metrics[kiter32];
        output.writeString(kiter32);
        viter33.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.dimensionKey != null) {
    output.writeFieldBegin('dimensionKey', Thrift.Type.STRING, 14);
    output.writeString(this.dimensionKey);
    output.writeFieldEnd();
  }
  if (this.collector != null) {
    output.writeFieldBegin('collector', Thrift.Type.STRING, 15);
    output.writeString(this.collector);
    output.writeFieldEnd();
  }
  if (this.flapEnum != null) {
    output.writeFieldBegin('flapEnum', Thrift.Type.I32, 16);
    output.writeI32(this.flapEnum);
    output.writeFieldEnd();
  }
  if (this.criteriaState != null) {
    output.writeFieldBegin('criteriaState', Thrift.Type.I32, 17);
    output.writeI32(this.criteriaState);
    output.writeFieldEnd();
  }
  if (this.computedState != null) {
    output.writeFieldBegin('computedState', Thrift.Type.I32, 18);
    output.writeI32(this.computedState);
    output.writeFieldEnd();
  }
  if (this.alarmId != null) {
    output.writeFieldBegin('alarmId', Thrift.Type.STRING, 19);
    output.writeString(this.alarmId);
    output.writeFieldEnd();
  }
  if (this.availability != null) {
    output.writeFieldBegin('availability', Thrift.Type.BYTE, 20);
    output.writeByte(this.availability);
    output.writeFieldEnd();
  }
  if (this.state != null) {
    output.writeFieldBegin('state', Thrift.Type.BYTE, 21);
    output.writeByte(this.state);
    output.writeFieldEnd();
  }
  if (this.status != null) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 22);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.correlatedStatuses != null) {
    output.writeFieldBegin('correlatedStatuses', Thrift.Type.LIST, 23);
    output.writeListBegin(Thrift.Type.STRUCT, this.correlatedStatuses.length);
    for (var iter34 in this.correlatedStatuses)
    {
      if (this.correlatedStatuses.hasOwnProperty(iter34))
      {
        iter34 = this.correlatedStatuses[iter34];
        iter34.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.monitoringZoneId != null) {
    output.writeFieldBegin('monitoringZoneId', Thrift.Type.STRING, 24);
    output.writeString(this.monitoringZoneId);
    output.writeFieldEnd();
  }
  if (this.txnId != null) {
    output.writeFieldBegin('txnId', Thrift.Type.STRING, 25);
    output.writeString(this.txnId);
    output.writeFieldEnd();
  }
  if (this.checkType != null) {
    output.writeFieldBegin('checkType', Thrift.Type.STRING, 26);
    output.writeString(this.checkType);
    output.writeFieldEnd();
  }
  if (this.previousKnownState != null) {
    output.writeFieldBegin('previousKnownState', Thrift.Type.I32, 27);
    output.writeI32(this.previousKnownState);
    output.writeFieldEnd();
  }
  if (this.collectorKeys != null) {
    output.writeFieldBegin('collectorKeys', Thrift.Type.LIST, 28);
    output.writeListBegin(Thrift.Type.STRING, this.collectorKeys.length);
    for (var iter35 in this.collectorKeys)
    {
      if (this.collectorKeys.hasOwnProperty(iter35))
      {
        iter35 = this.collectorKeys[iter35];
        output.writeString(iter35);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RepeatEvent = module.exports.RepeatEvent = function(args) {
  this.alarmId = null;
  if (args) {
    if (args.alarmId !== undefined) {
      this.alarmId = args.alarmId;
    }
  }
};
RepeatEvent.prototype = {};
RepeatEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.alarmId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RepeatEvent.prototype.write = function(output) {
  output.writeStructBegin('RepeatEvent');
  if (this.alarmId != null) {
    output.writeFieldBegin('alarmId', Thrift.Type.STRING, 1);
    output.writeString(this.alarmId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CollectorEvent = module.exports.CollectorEvent = function(args) {
  this.collector = null;
  this.timestamp = null;
  this.availability = null;
  if (args) {
    if (args.collector !== undefined) {
      this.collector = args.collector;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.availability !== undefined) {
      this.availability = args.availability;
    }
  }
};
CollectorEvent.prototype = {};
CollectorEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.collector = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.availability = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CollectorEvent.prototype.write = function(output) {
  output.writeStructBegin('CollectorEvent');
  if (this.collector != null) {
    output.writeFieldBegin('collector', Thrift.Type.STRING, 1);
    output.writeString(this.collector);
    output.writeFieldEnd();
  }
  if (this.timestamp != null) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.availability != null) {
    output.writeFieldBegin('availability', Thrift.Type.I32, 3);
    output.writeI32(this.availability);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ConsecutiveTriggerEvent = module.exports.ConsecutiveTriggerEvent = function(args) {
  this.alarmId = null;
  this.checkId = null;
  this.dimensionKey = null;
  this.monitoringZoneId = null;
  this.timestamp = null;
  this.criteriaState = null;
  this.consecutiveEvents = 0;
  if (args) {
    if (args.alarmId !== undefined) {
      this.alarmId = args.alarmId;
    }
    if (args.checkId !== undefined) {
      this.checkId = args.checkId;
    }
    if (args.dimensionKey !== undefined) {
      this.dimensionKey = args.dimensionKey;
    }
    if (args.monitoringZoneId !== undefined) {
      this.monitoringZoneId = args.monitoringZoneId;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.criteriaState !== undefined) {
      this.criteriaState = args.criteriaState;
    }
    if (args.consecutiveEvents !== undefined) {
      this.consecutiveEvents = args.consecutiveEvents;
    }
  }
};
ConsecutiveTriggerEvent.prototype = {};
ConsecutiveTriggerEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.alarmId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.checkId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dimensionKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.monitoringZoneId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.criteriaState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.consecutiveEvents = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConsecutiveTriggerEvent.prototype.write = function(output) {
  output.writeStructBegin('ConsecutiveTriggerEvent');
  if (this.alarmId != null) {
    output.writeFieldBegin('alarmId', Thrift.Type.STRING, 1);
    output.writeString(this.alarmId);
    output.writeFieldEnd();
  }
  if (this.checkId != null) {
    output.writeFieldBegin('checkId', Thrift.Type.STRING, 2);
    output.writeString(this.checkId);
    output.writeFieldEnd();
  }
  if (this.dimensionKey != null) {
    output.writeFieldBegin('dimensionKey', Thrift.Type.STRING, 3);
    output.writeString(this.dimensionKey);
    output.writeFieldEnd();
  }
  if (this.monitoringZoneId != null) {
    output.writeFieldBegin('monitoringZoneId', Thrift.Type.STRING, 4);
    output.writeString(this.monitoringZoneId);
    output.writeFieldEnd();
  }
  if (this.timestamp != null) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.criteriaState != null) {
    output.writeFieldBegin('criteriaState', Thrift.Type.I32, 6);
    output.writeI32(this.criteriaState);
    output.writeFieldEnd();
  }
  if (this.consecutiveEvents != null) {
    output.writeFieldBegin('consecutiveEvents', Thrift.Type.I32, 7);
    output.writeI32(this.consecutiveEvents);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CollectorTimeout = module.exports.CollectorTimeout = function(args) {
  this.timeout = null;
  if (args) {
    if (args.timeout !== undefined) {
      this.timeout = args.timeout;
    }
  }
};
CollectorTimeout.prototype = {};
CollectorTimeout.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timeout = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CollectorTimeout.prototype.write = function(output) {
  output.writeStructBegin('CollectorTimeout');
  if (this.timeout != null) {
    output.writeFieldBegin('timeout', Thrift.Type.I64, 1);
    output.writeI64(this.timeout);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoveBoundCheck = module.exports.RemoveBoundCheck = function(args) {
  this.checkId = null;
  this.monitoringZoneId = null;
  if (args) {
    if (args.checkId !== undefined) {
      this.checkId = args.checkId;
    }
    if (args.monitoringZoneId !== undefined) {
      this.monitoringZoneId = args.monitoringZoneId;
    }
  }
};
RemoveBoundCheck.prototype = {};
RemoveBoundCheck.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.checkId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.monitoringZoneId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoveBoundCheck.prototype.write = function(output) {
  output.writeStructBegin('RemoveBoundCheck');
  if (this.checkId != null) {
    output.writeFieldBegin('checkId', Thrift.Type.STRING, 1);
    output.writeString(this.checkId);
    output.writeFieldEnd();
  }
  if (this.monitoringZoneId != null) {
    output.writeFieldBegin('monitoringZoneId', Thrift.Type.STRING, 2);
    output.writeString(this.monitoringZoneId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MinimalState = module.exports.MinimalState = function(args) {
  this.alarmId = null;
  this.dimensionKey = null;
  this.checkId = null;
  this.computedState = null;
  this.timestamp = null;
  if (args) {
    if (args.alarmId !== undefined) {
      this.alarmId = args.alarmId;
    }
    if (args.dimensionKey !== undefined) {
      this.dimensionKey = args.dimensionKey;
    }
    if (args.checkId !== undefined) {
      this.checkId = args.checkId;
    }
    if (args.computedState !== undefined) {
      this.computedState = args.computedState;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
  }
};
MinimalState.prototype = {};
MinimalState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.alarmId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dimensionKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.checkId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.computedState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MinimalState.prototype.write = function(output) {
  output.writeStructBegin('MinimalState');
  if (this.alarmId != null) {
    output.writeFieldBegin('alarmId', Thrift.Type.STRING, 1);
    output.writeString(this.alarmId);
    output.writeFieldEnd();
  }
  if (this.dimensionKey != null) {
    output.writeFieldBegin('dimensionKey', Thrift.Type.STRING, 2);
    output.writeString(this.dimensionKey);
    output.writeFieldEnd();
  }
  if (this.checkId != null) {
    output.writeFieldBegin('checkId', Thrift.Type.STRING, 3);
    output.writeString(this.checkId);
    output.writeFieldEnd();
  }
  if (this.computedState != null) {
    output.writeFieldBegin('computedState', Thrift.Type.I32, 4);
    output.writeI32(this.computedState);
    output.writeFieldEnd();
  }
  if (this.timestamp != null) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FlapState = module.exports.FlapState = function(args) {
  this.alarmId = null;
  this.dimensionKey = null;
  this.checkId = null;
  this.flapCalc = null;
  this.flapEnum = null;
  if (args) {
    if (args.alarmId !== undefined) {
      this.alarmId = args.alarmId;
    }
    if (args.dimensionKey !== undefined) {
      this.dimensionKey = args.dimensionKey;
    }
    if (args.checkId !== undefined) {
      this.checkId = args.checkId;
    }
    if (args.flapCalc !== undefined) {
      this.flapCalc = args.flapCalc;
    }
    if (args.flapEnum !== undefined) {
      this.flapEnum = args.flapEnum;
    }
  }
};
FlapState.prototype = {};
FlapState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.alarmId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dimensionKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.checkId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.flapCalc = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.flapEnum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FlapState.prototype.write = function(output) {
  output.writeStructBegin('FlapState');
  if (this.alarmId != null) {
    output.writeFieldBegin('alarmId', Thrift.Type.STRING, 1);
    output.writeString(this.alarmId);
    output.writeFieldEnd();
  }
  if (this.dimensionKey != null) {
    output.writeFieldBegin('dimensionKey', Thrift.Type.STRING, 2);
    output.writeString(this.dimensionKey);
    output.writeFieldEnd();
  }
  if (this.checkId != null) {
    output.writeFieldBegin('checkId', Thrift.Type.STRING, 3);
    output.writeString(this.checkId);
    output.writeFieldEnd();
  }
  if (this.flapCalc != null) {
    output.writeFieldBegin('flapCalc', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.flapCalc);
    output.writeFieldEnd();
  }
  if (this.flapEnum != null) {
    output.writeFieldBegin('flapEnum', Thrift.Type.I32, 5);
    output.writeI32(this.flapEnum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ConditionState = module.exports.ConditionState = function(args) {
  this.state = null;
  this.message = null;
  if (args) {
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
ConditionState.prototype = {};
ConditionState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConditionState.prototype.write = function(output) {
  output.writeStructBegin('ConditionState');
  if (this.state != null) {
    output.writeFieldBegin('state', Thrift.Type.I32, 1);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.message != null) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TelescopeOrRemove = module.exports.TelescopeOrRemove = function(args) {
  this.telescope = null;
  this.bc = null;
  if (args) {
    if (args.telescope !== undefined) {
      this.telescope = args.telescope;
    }
    if (args.bc !== undefined) {
      this.bc = args.bc;
    }
  }
};
TelescopeOrRemove.prototype = {};
TelescopeOrRemove.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.telescope = new ttypes.Telescope();
        this.telescope.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.bc = new ttypes.RemoveBoundCheck();
        this.bc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TelescopeOrRemove.prototype.write = function(output) {
  output.writeStructBegin('TelescopeOrRemove');
  if (this.telescope != null) {
    output.writeFieldBegin('telescope', Thrift.Type.STRUCT, 1);
    this.telescope.write(output);
    output.writeFieldEnd();
  }
  if (this.bc != null) {
    output.writeFieldBegin('bc', Thrift.Type.STRUCT, 2);
    this.bc.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

