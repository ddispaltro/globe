//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./telescope_types');
//HELPER FUNCTIONS AND STRUCTURES

var TelescopeServer_Publish_args = function(args) {
  this.messages = null;
  if (args) {
    if (args.messages !== undefined) {
      this.messages = args.messages;
    }
  }
};
TelescopeServer_Publish_args.prototype = {};
TelescopeServer_Publish_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size36 = 0;
        var _rtmp340;
        this.messages = [];
        var _etype39 = 0;
        _rtmp340 = input.readListBegin();
        _etype39 = _rtmp340.etype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          var elem42 = null;
          elem42 = new ttypes.Telescope();
          elem42.read(input);
          this.messages.push(elem42);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TelescopeServer_Publish_args.prototype.write = function(output) {
  output.writeStructBegin('TelescopeServer_Publish_args');
  if (this.messages != null) {
    output.writeFieldBegin('messages', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.messages.length);
    for (var iter43 in this.messages)
    {
      if (this.messages.hasOwnProperty(iter43))
      {
        iter43 = this.messages[iter43];
        iter43.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TelescopeServer_Publish_result = function(args) {
};
TelescopeServer_Publish_result.prototype = {};
TelescopeServer_Publish_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TelescopeServer_Publish_result.prototype.write = function(output) {
  output.writeStructBegin('TelescopeServer_Publish_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TelescopeServer_RepeatEvents_args = function(args) {
  this.repeatEvents = null;
  if (args) {
    if (args.repeatEvents !== undefined) {
      this.repeatEvents = args.repeatEvents;
    }
  }
};
TelescopeServer_RepeatEvents_args.prototype = {};
TelescopeServer_RepeatEvents_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size44 = 0;
        var _rtmp348;
        this.repeatEvents = [];
        var _etype47 = 0;
        _rtmp348 = input.readListBegin();
        _etype47 = _rtmp348.etype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          var elem50 = null;
          elem50 = new ttypes.RepeatEvent();
          elem50.read(input);
          this.repeatEvents.push(elem50);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TelescopeServer_RepeatEvents_args.prototype.write = function(output) {
  output.writeStructBegin('TelescopeServer_RepeatEvents_args');
  if (this.repeatEvents != null) {
    output.writeFieldBegin('repeatEvents', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.repeatEvents.length);
    for (var iter51 in this.repeatEvents)
    {
      if (this.repeatEvents.hasOwnProperty(iter51))
      {
        iter51 = this.repeatEvents[iter51];
        iter51.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TelescopeServer_RepeatEvents_result = function(args) {
};
TelescopeServer_RepeatEvents_result.prototype = {};
TelescopeServer_RepeatEvents_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TelescopeServer_RepeatEvents_result.prototype.write = function(output) {
  output.writeStructBegin('TelescopeServer_RepeatEvents_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TelescopeServer_RemoveBoundChecks_args = function(args) {
  this.removeBoundChecks = null;
  if (args) {
    if (args.removeBoundChecks !== undefined) {
      this.removeBoundChecks = args.removeBoundChecks;
    }
  }
};
TelescopeServer_RemoveBoundChecks_args.prototype = {};
TelescopeServer_RemoveBoundChecks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size52 = 0;
        var _rtmp356;
        this.removeBoundChecks = [];
        var _etype55 = 0;
        _rtmp356 = input.readListBegin();
        _etype55 = _rtmp356.etype;
        _size52 = _rtmp356.size;
        for (var _i57 = 0; _i57 < _size52; ++_i57)
        {
          var elem58 = null;
          elem58 = new ttypes.RemoveBoundCheck();
          elem58.read(input);
          this.removeBoundChecks.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TelescopeServer_RemoveBoundChecks_args.prototype.write = function(output) {
  output.writeStructBegin('TelescopeServer_RemoveBoundChecks_args');
  if (this.removeBoundChecks != null) {
    output.writeFieldBegin('removeBoundChecks', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.removeBoundChecks.length);
    for (var iter59 in this.removeBoundChecks)
    {
      if (this.removeBoundChecks.hasOwnProperty(iter59))
      {
        iter59 = this.removeBoundChecks[iter59];
        iter59.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TelescopeServer_RemoveBoundChecks_result = function(args) {
};
TelescopeServer_RemoveBoundChecks_result.prototype = {};
TelescopeServer_RemoveBoundChecks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TelescopeServer_RemoveBoundChecks_result.prototype.write = function(output) {
  output.writeStructBegin('TelescopeServer_RemoveBoundChecks_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TelescopeServer_UpdateCollectorTimeout_args = function(args) {
  this.timeout = null;
  if (args) {
    if (args.timeout !== undefined) {
      this.timeout = args.timeout;
    }
  }
};
TelescopeServer_UpdateCollectorTimeout_args.prototype = {};
TelescopeServer_UpdateCollectorTimeout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.timeout = new ttypes.CollectorTimeout();
        this.timeout.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TelescopeServer_UpdateCollectorTimeout_args.prototype.write = function(output) {
  output.writeStructBegin('TelescopeServer_UpdateCollectorTimeout_args');
  if (this.timeout != null) {
    output.writeFieldBegin('timeout', Thrift.Type.STRUCT, 1);
    this.timeout.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TelescopeServer_UpdateCollectorTimeout_result = function(args) {
};
TelescopeServer_UpdateCollectorTimeout_result.prototype = {};
TelescopeServer_UpdateCollectorTimeout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TelescopeServer_UpdateCollectorTimeout_result.prototype.write = function(output) {
  output.writeStructBegin('TelescopeServer_UpdateCollectorTimeout_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TelescopeServer_TestCompileAlarm_args = function(args) {
  this.txnId = null;
  this.query = null;
  if (args) {
    if (args.txnId !== undefined) {
      this.txnId = args.txnId;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
TelescopeServer_TestCompileAlarm_args.prototype = {};
TelescopeServer_TestCompileAlarm_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.txnId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TelescopeServer_TestCompileAlarm_args.prototype.write = function(output) {
  output.writeStructBegin('TelescopeServer_TestCompileAlarm_args');
  if (this.txnId != null) {
    output.writeFieldBegin('txnId', Thrift.Type.STRING, 1);
    output.writeString(this.txnId);
    output.writeFieldEnd();
  }
  if (this.query != null) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TelescopeServer_TestCompileAlarm_result = function(args) {
  this.iqe = null;
  if (args) {
    if (args.iqe !== undefined) {
      this.iqe = args.iqe;
    }
  }
};
TelescopeServer_TestCompileAlarm_result.prototype = {};
TelescopeServer_TestCompileAlarm_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.iqe = new ttypes.InvalidQueryException();
        this.iqe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TelescopeServer_TestCompileAlarm_result.prototype.write = function(output) {
  output.writeStructBegin('TelescopeServer_TestCompileAlarm_result');
  if (this.iqe != null) {
    output.writeFieldBegin('iqe', Thrift.Type.STRUCT, 1);
    this.iqe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TelescopeServer_AddAlarm_args = function(args) {
  this.alarmId = null;
  this.query = null;
  if (args) {
    if (args.alarmId !== undefined) {
      this.alarmId = args.alarmId;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
TelescopeServer_AddAlarm_args.prototype = {};
TelescopeServer_AddAlarm_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.alarmId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TelescopeServer_AddAlarm_args.prototype.write = function(output) {
  output.writeStructBegin('TelescopeServer_AddAlarm_args');
  if (this.alarmId != null) {
    output.writeFieldBegin('alarmId', Thrift.Type.STRING, 1);
    output.writeString(this.alarmId);
    output.writeFieldEnd();
  }
  if (this.query != null) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TelescopeServer_AddAlarm_result = function(args) {
  this.iqe = null;
  if (args) {
    if (args.iqe !== undefined) {
      this.iqe = args.iqe;
    }
  }
};
TelescopeServer_AddAlarm_result.prototype = {};
TelescopeServer_AddAlarm_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.iqe = new ttypes.InvalidQueryException();
        this.iqe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TelescopeServer_AddAlarm_result.prototype.write = function(output) {
  output.writeStructBegin('TelescopeServer_AddAlarm_result');
  if (this.iqe != null) {
    output.writeFieldBegin('iqe', Thrift.Type.STRUCT, 1);
    this.iqe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TelescopeServer_RemoveAlarm_args = function(args) {
  this.alarmId = null;
  if (args) {
    if (args.alarmId !== undefined) {
      this.alarmId = args.alarmId;
    }
  }
};
TelescopeServer_RemoveAlarm_args.prototype = {};
TelescopeServer_RemoveAlarm_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.alarmId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TelescopeServer_RemoveAlarm_args.prototype.write = function(output) {
  output.writeStructBegin('TelescopeServer_RemoveAlarm_args');
  if (this.alarmId != null) {
    output.writeFieldBegin('alarmId', Thrift.Type.STRING, 1);
    output.writeString(this.alarmId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TelescopeServer_RemoveAlarm_result = function(args) {
  this.qnfe = null;
  if (args) {
    if (args.qnfe !== undefined) {
      this.qnfe = args.qnfe;
    }
  }
};
TelescopeServer_RemoveAlarm_result.prototype = {};
TelescopeServer_RemoveAlarm_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.qnfe = new ttypes.AlarmNotFoundException();
        this.qnfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TelescopeServer_RemoveAlarm_result.prototype.write = function(output) {
  output.writeStructBegin('TelescopeServer_RemoveAlarm_result');
  if (this.qnfe != null) {
    output.writeFieldBegin('qnfe', Thrift.Type.STRUCT, 1);
    this.qnfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TelescopeServer_GetAlarm_args = function(args) {
  this.alarmId = null;
  if (args) {
    if (args.alarmId !== undefined) {
      this.alarmId = args.alarmId;
    }
  }
};
TelescopeServer_GetAlarm_args.prototype = {};
TelescopeServer_GetAlarm_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.alarmId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TelescopeServer_GetAlarm_args.prototype.write = function(output) {
  output.writeStructBegin('TelescopeServer_GetAlarm_args');
  if (this.alarmId != null) {
    output.writeFieldBegin('alarmId', Thrift.Type.STRING, 1);
    output.writeString(this.alarmId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TelescopeServer_GetAlarm_result = function(args) {
  this.success = null;
  this.qnfe = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.qnfe !== undefined) {
      this.qnfe = args.qnfe;
    }
  }
};
TelescopeServer_GetAlarm_result.prototype = {};
TelescopeServer_GetAlarm_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.qnfe = new ttypes.AlarmNotFoundException();
        this.qnfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TelescopeServer_GetAlarm_result.prototype.write = function(output) {
  output.writeStructBegin('TelescopeServer_GetAlarm_result');
  if (this.success != null) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.qnfe != null) {
    output.writeFieldBegin('qnfe', Thrift.Type.STRUCT, 1);
    this.qnfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TelescopeServerClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
TelescopeServerClient.prototype = {};
TelescopeServerClient.prototype.Publish = function(messages, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_Publish(messages);
};

TelescopeServerClient.prototype.send_Publish = function(messages) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Publish', Thrift.MessageType.CALL, this.seqid);
  var args = new TelescopeServer_Publish_args();
  args.messages = messages;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TelescopeServerClient.prototype.recv_Publish = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TelescopeServer_Publish_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
TelescopeServerClient.prototype.RepeatEvents = function(repeatEvents, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_RepeatEvents(repeatEvents);
};

TelescopeServerClient.prototype.send_RepeatEvents = function(repeatEvents) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('RepeatEvents', Thrift.MessageType.CALL, this.seqid);
  var args = new TelescopeServer_RepeatEvents_args();
  args.repeatEvents = repeatEvents;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TelescopeServerClient.prototype.recv_RepeatEvents = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TelescopeServer_RepeatEvents_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
TelescopeServerClient.prototype.RemoveBoundChecks = function(removeBoundChecks, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_RemoveBoundChecks(removeBoundChecks);
};

TelescopeServerClient.prototype.send_RemoveBoundChecks = function(removeBoundChecks) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('RemoveBoundChecks', Thrift.MessageType.CALL, this.seqid);
  var args = new TelescopeServer_RemoveBoundChecks_args();
  args.removeBoundChecks = removeBoundChecks;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TelescopeServerClient.prototype.recv_RemoveBoundChecks = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TelescopeServer_RemoveBoundChecks_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
TelescopeServerClient.prototype.UpdateCollectorTimeout = function(timeout, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_UpdateCollectorTimeout(timeout);
};

TelescopeServerClient.prototype.send_UpdateCollectorTimeout = function(timeout) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('UpdateCollectorTimeout', Thrift.MessageType.CALL, this.seqid);
  var args = new TelescopeServer_UpdateCollectorTimeout_args();
  args.timeout = timeout;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TelescopeServerClient.prototype.recv_UpdateCollectorTimeout = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TelescopeServer_UpdateCollectorTimeout_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
TelescopeServerClient.prototype.TestCompileAlarm = function(txnId, query, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_TestCompileAlarm(txnId, query);
};

TelescopeServerClient.prototype.send_TestCompileAlarm = function(txnId, query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('TestCompileAlarm', Thrift.MessageType.CALL, this.seqid);
  var args = new TelescopeServer_TestCompileAlarm_args();
  args.txnId = txnId;
  args.query = query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TelescopeServerClient.prototype.recv_TestCompileAlarm = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TelescopeServer_TestCompileAlarm_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.iqe) {
    return callback(result.iqe);
  }
  callback(null)
};
TelescopeServerClient.prototype.AddAlarm = function(alarmId, query, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_AddAlarm(alarmId, query);
};

TelescopeServerClient.prototype.send_AddAlarm = function(alarmId, query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('AddAlarm', Thrift.MessageType.CALL, this.seqid);
  var args = new TelescopeServer_AddAlarm_args();
  args.alarmId = alarmId;
  args.query = query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TelescopeServerClient.prototype.recv_AddAlarm = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TelescopeServer_AddAlarm_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.iqe) {
    return callback(result.iqe);
  }
  callback(null)
};
TelescopeServerClient.prototype.RemoveAlarm = function(alarmId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_RemoveAlarm(alarmId);
};

TelescopeServerClient.prototype.send_RemoveAlarm = function(alarmId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('RemoveAlarm', Thrift.MessageType.CALL, this.seqid);
  var args = new TelescopeServer_RemoveAlarm_args();
  args.alarmId = alarmId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TelescopeServerClient.prototype.recv_RemoveAlarm = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TelescopeServer_RemoveAlarm_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.qnfe) {
    return callback(result.qnfe);
  }
  callback(null)
};
TelescopeServerClient.prototype.GetAlarm = function(alarmId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_GetAlarm(alarmId);
};

TelescopeServerClient.prototype.send_GetAlarm = function(alarmId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetAlarm', Thrift.MessageType.CALL, this.seqid);
  var args = new TelescopeServer_GetAlarm_args();
  args.alarmId = alarmId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TelescopeServerClient.prototype.recv_GetAlarm = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TelescopeServer_GetAlarm_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.qnfe) {
    return callback(result.qnfe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetAlarm failed: unknown result');
};
var TelescopeServerProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
TelescopeServerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

TelescopeServerProcessor.prototype.process_Publish = function(seqid, input, output) {
  var args = new TelescopeServer_Publish_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TelescopeServer_Publish_result();
  this._handler.Publish(args.messages, function (success) {
    result.success = success;
    output.writeMessageBegin("Publish", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TelescopeServerProcessor.prototype.process_RepeatEvents = function(seqid, input, output) {
  var args = new TelescopeServer_RepeatEvents_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TelescopeServer_RepeatEvents_result();
  this._handler.RepeatEvents(args.repeatEvents, function (success) {
    result.success = success;
    output.writeMessageBegin("RepeatEvents", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TelescopeServerProcessor.prototype.process_RemoveBoundChecks = function(seqid, input, output) {
  var args = new TelescopeServer_RemoveBoundChecks_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TelescopeServer_RemoveBoundChecks_result();
  this._handler.RemoveBoundChecks(args.removeBoundChecks, function (success) {
    result.success = success;
    output.writeMessageBegin("RemoveBoundChecks", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TelescopeServerProcessor.prototype.process_UpdateCollectorTimeout = function(seqid, input, output) {
  var args = new TelescopeServer_UpdateCollectorTimeout_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TelescopeServer_UpdateCollectorTimeout_result();
  this._handler.UpdateCollectorTimeout(args.timeout, function (success) {
    result.success = success;
    output.writeMessageBegin("UpdateCollectorTimeout", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TelescopeServerProcessor.prototype.process_TestCompileAlarm = function(seqid, input, output) {
  var args = new TelescopeServer_TestCompileAlarm_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TelescopeServer_TestCompileAlarm_result();
  this._handler.TestCompileAlarm(args.txnId, args.query, function (success) {
    result.success = success;
    output.writeMessageBegin("TestCompileAlarm", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TelescopeServerProcessor.prototype.process_AddAlarm = function(seqid, input, output) {
  var args = new TelescopeServer_AddAlarm_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TelescopeServer_AddAlarm_result();
  this._handler.AddAlarm(args.alarmId, args.query, function (success) {
    result.success = success;
    output.writeMessageBegin("AddAlarm", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TelescopeServerProcessor.prototype.process_RemoveAlarm = function(seqid, input, output) {
  var args = new TelescopeServer_RemoveAlarm_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TelescopeServer_RemoveAlarm_result();
  this._handler.RemoveAlarm(args.alarmId, function (success) {
    result.success = success;
    output.writeMessageBegin("RemoveAlarm", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

TelescopeServerProcessor.prototype.process_GetAlarm = function(seqid, input, output) {
  var args = new TelescopeServer_GetAlarm_args();
  args.read(input);
  input.readMessageEnd();
  var result = new TelescopeServer_GetAlarm_result();
  this._handler.GetAlarm(args.alarmId, function (success) {
    result.success = success;
    output.writeMessageBegin("GetAlarm", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

